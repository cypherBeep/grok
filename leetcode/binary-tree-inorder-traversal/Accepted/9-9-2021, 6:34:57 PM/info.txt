{"id":552054396,"lang":"java","time":"5 months, 1 week","timestamp":1631192697,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/552054396/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"37.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        ArrayList<Integer> out = new ArrayList<Integer>();\n        Stack<TreeNode> stack = new Stack<TreeNode>();\n        TreeNode cur = root;\n        while(cur != null || !stack.isEmpty()){\n            while(cur != null){\n                stack.push(cur);\n                cur = cur.left;\n            }\n            cur = stack.pop();\n            out.add(cur.val);\n            cur = cur.right;\n        }\n        return out;\n    }\n    // public void inorder(TreeNode root, List<Integer> out){\n    //     if(root == null) return;\n    //     inorder(root.left, out);\n    //     out.add(root.val);\n    //     inorder(root.right, out);\n    // }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal"}