{"id":640426949,"lang":"rust","time":"4 days, 19 hours","timestamp":1644738991,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/640426949/","is_pending":"Not Pending","title":"Path Sum II","memory":"2.9 MB","code":"// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn path_sum(root: Option<Rc<RefCell<TreeNode>>>, target_sum: i32) -> Vec<Vec<i32>> {\n        let mut all: Vec<Vec<i32>> = vec![];\n        let mut current_path = vec![];\n        Self::find_path(root, target_sum, &mut all, &mut current_path);\n        all\n    }\n    pub fn find_path(node: Option<Rc<RefCell<TreeNode>>>, target_sum: i32, all: &mut Vec<Vec<i32>>, current: &mut Vec<i32>) {\n        match node {\n            Some(x) => {\n                let cur = x.borrow();\n                current.push(cur.val);\n                if cur.val == target_sum && cur.left.is_none() && cur.right.is_none(){\n                    all.push(current.to_vec());\n                } else {\n                    Self::find_path(cur.right.clone(), target_sum - cur.val, all, current);\n                    Self::find_path(cur.left.clone(), target_sum - cur.val, all, current);\n                }\n                current.remove(current.len()-1);\n            },\n            _ => return,\n        }\n    }\n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum-ii"}