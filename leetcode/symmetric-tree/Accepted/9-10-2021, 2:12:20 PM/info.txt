{"id":552513648,"lang":"java","time":"5 months, 1 week","timestamp":1631263340,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/552513648/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"39.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        // Iterative\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        queue.add(root);\n        queue.add(root);\n        while(!queue.isEmpty()){\n            TreeNode t1 = queue.poll();\n            TreeNode t2 = queue.poll();\n            if(t1 == null && t2 == null) continue;\n            if(t1 == null || t2 == null) return false;  \n            if(t1.val != t2.val) return false;\n            queue.add(t1.left);\n            queue.add(t2.right);\n            queue.add(t1.right);\n            queue.add(t2.left);\n        }\n        return true;\n        // recursive: return isMirror(root, root);\n    }\n    // public boolean isMirror(TreeNode t1, TreeNode t2){\n    //     if (t1 == null && t2 == null) return true;\n    //     if (t1 == null || t2 == null) return false;\n    //     return (t1.val == t2.val)\n    //         && isMirror(t1.right, t2.left)\n    //         && isMirror(t1.left, t2.right);\n    // }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree"}