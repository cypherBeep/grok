{"id":551535581,"lang":"java","time":"5 months, 1 week","timestamp":1631113632,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/551535581/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution {\n    public String longestPalindrome(String s) {\n        StringBuilder sR = new StringBuilder(s);\n        sR.reverse();\n        int m = s.length();\n        int n = sR.length();\n        int[][] dp = new int[m+1][n+1];\n        String res = \"\";\n        while(m > 0 && n > 0){\n            if(s.charAt(m-1) == sR.charAt(n-1)){\n                res += s.charAt(m-1);\n                m--;\n                n--;\n            }else{\n            if(dp[m][n-1] > dp[m-1][n]) n--;\n            else m--;\n            }   \n        }\n        return res;\n    }\n    public int lps(String s1, String s2, int m, int n, int[][] dp){\n        if(m == 0 || n == 0) return dp[m][n] = 0;\n        if(s1.charAt(m-1) == s2.charAt(n-1)) return dp[m][n] = 1+lps(s1,s2,m-1,n-1,dp);\n        return dp[m][n] = Math.max(lps(s1,s2,m-1,n,dp),lps(s1,s2,m,n-1,dp));\n    }\n}","compare_result":"101111011110110001110000000110111100011100101000000000000000000000000000000000000000000000001111111111111111111110111010000010101010101010101010101010101010110101011010101010100","title_slug":"longest-palindromic-substring"}