{"id":557992804,"lang":"java","time":"5Â months","timestamp":1632131999,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/557992804/","is_pending":"Not Pending","title":"Count Good Nodes in Binary Tree","memory":"47.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int count = 0;\n    public int goodNodes(TreeNode root) {\n        // idea is to store the value of previous max node while doing \n        // dfs to keep on checking if the value of current node is\n        // greater than all the previous nodes.\n        // if it ain't then its not a good node.\n        dfs(root, Integer.MIN_VALUE);\n        return count;\n    }\n    public void dfs(TreeNode node, int max){\n        if(node.val >= max) {\n            count++;\n        }\n        // logic for dfs\n        if(node.left != null) dfs(node.left, Math.max(node.val, max));\n        if(node.right != null) dfs(node.right, Math.max(node.val, max));\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-good-nodes-in-binary-tree"}