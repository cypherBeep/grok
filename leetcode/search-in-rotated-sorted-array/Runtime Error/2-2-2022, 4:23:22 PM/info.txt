{"id":632910916,"lang":"java","time":"2 weeks, 1 day","timestamp":1643799202,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/632910916/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"N/A","code":"class Solution {\n    public int getMid(int[] nums) {\n        if(nums.length == 1) \n            return nums[0];\n        int left = 0;\n        int right = nums.length - 1;\n        int mid = left + (right - left) / 2;\n        \n        while(left <= right) {\n            if(nums[mid] > nums[mid+1])\n                return mid+1;\n            if(nums[mid-1] > nums[mid])\n                return mid;\n            if(nums[mid] > nums[0])\n                left = mid + 1;\n            else\n                right = mid - 1;\n        }\n        return -1;\n    }\n    public int search(int[] nums, int target){\n        if(nums.length == 1 && nums[0] != target)\n            return -1;\n        if(nums.length == 1 && nums[0] == target)\n            return 0;\n        int mid = getMid(nums);\n        int left = 0;\n        int right = nums.length - 1;\n        while(left <= right){\n            if(nums[mid] > target)\n                right = mid - 1;\n            if(nums[mid] < target)\n                left = mid + 1;\n            if(nums[mid] == target) \n                return mid;\n            mid = left + (right - left) / 2;\n        }\n        return -1;\n    }\n}","compare_result":"111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"search-in-rotated-sorted-array"}