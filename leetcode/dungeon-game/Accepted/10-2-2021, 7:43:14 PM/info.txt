{"id":564499251,"lang":"java","time":"4 months, 2 weeks","timestamp":1633183994,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/564499251/","is_pending":"Not Pending","title":"Dungeon Game","memory":"40.9 MB","code":"class Solution {\n  int inf = Integer.MAX_VALUE;\n  int[][] dp;\n  int rows, cols;\n\n  public int getMinHealth(int currCell, int nextRow, int nextCol) {\n    if (nextRow >= this.rows || nextCol >= this.cols)\n      return inf;\n    int nextCell = this.dp[nextRow][nextCol];\n    // hero needs at least 1 point to survive\n    return Math.max(1, nextCell - currCell);\n  }\n\n  public int calculateMinimumHP(int[][] dungeon) {\n    this.rows = dungeon.length;\n    this.cols = dungeon[0].length;\n    this.dp = new int[rows][cols];\n    for (int[] arr : this.dp) {\n      Arrays.fill(arr, this.inf);\n    }\n    int currCell, rightHealth, downHealth, nextHealth, minHealth;\n    for (int row = this.rows - 1; row >= 0; --row) {\n      for (int col = this.cols - 1; col >= 0; --col) {\n        currCell = dungeon[row][col];\n\n        rightHealth = getMinHealth(currCell, row, col + 1);\n        downHealth = getMinHealth(currCell, row + 1, col);\n        nextHealth = Math.min(rightHealth, downHealth);\n\n        if (nextHealth != inf) {\n          minHealth = nextHealth;\n        } else {\n          minHealth = currCell >= 0 ? 1 : 1 - currCell;\n        }\n        this.dp[row][col] = minHealth;\n      }\n    }\n    return this.dp[0][0];\n  }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"dungeon-game"}