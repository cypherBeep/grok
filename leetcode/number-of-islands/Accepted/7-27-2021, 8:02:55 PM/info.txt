{"id":529136968,"lang":"java","time":"6 months, 3 weeks","timestamp":1627396375,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/529136968/","is_pending":"Not Pending","title":"Number of Islands","memory":"41.1 MB","code":"class Solution {\n    public int numIslands(char[][] grid) {\n        int count = 0;\n        for(int i = 0; i < grid.length; i++){\n            for(int j = 0; j < grid[i].length; j++){\n                if(grid[i][j] == '1'){\n                    count++;\n                    callDFS(grid, i, j);\n                }\n            }\n        }\n        return count;\n    }\n    \n    public void callDFS(char[][] grid, int i, int j){\n        if(isSafe(grid, i, j)){\n            grid[i][j] = '0';\n            callDFS(grid, i+1, j);\n            callDFS(grid, i-1, j);\n            callDFS(grid, i, j+1);\n            callDFS(grid, i, j-1);\n        }\n    }\n    \n    private boolean isSafe(char[][] grid, int x, int y) {\n        return x>=0 && y>=0 && x<grid.length && y<grid[0].length && grid[x][y] == '1';\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"number-of-islands"}