{"id":552473937,"lang":"java","time":"5 months, 1 week","timestamp":1631256610,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/552473937/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"40.2 MB","code":"class Solution {\n    // Recursion\n//     List<List<Integer>> levels = new ArrayList<List<Integer>>();\n//     public void helper(TreeNode node, int level) {\n//         // start the current level\n//         if (levels.size() == level)\n//             levels.add(new ArrayList<Integer>());\n\n//          // fulfil the current level\n//          levels.get(level).add(node.val);\n\n//          // process child nodes for the next level\n//          if (node.left != null)\n//             helper(node.left, level + 1);\n//          if (node.right != null)\n//             helper(node.right, level + 1);\n//     }\n    \n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> levels = new ArrayList<List<Integer>>();\n        if (root == null) return levels;\n        int level = 0;\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        queue.add(root);\n        while(!queue.isEmpty()){\n        // start the current level\n          levels.add(new ArrayList<Integer>());\n\n          // number of elements in the current level\n          int level_length = queue.size();\n          for(int i = 0; i < level_length; ++i) {\n            TreeNode node = queue.remove();\n\n            // fulfill the current level\n            levels.get(level).add(node.val);\n\n            // add child nodes of the current level\n            // in the queue for the next level\n            if (node.left != null) queue.add(node.left);\n            if (node.right != null) queue.add(node.right);\n          }\n          // go to next level\n          level++;\n        }\n        return levels;\n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal"}