{"id":560225225,"lang":"java","time":"4 months, 3 weeks","timestamp":1632481558,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/560225225/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"39.3 MB","code":"class Solution {\n    // Recursion\n//     List<List<Integer>> levels = new ArrayList<List<Integer>>();\n//     public void helper(TreeNode node, int level) {\n//         // start the current level\n//         if (levels.size() == level)\n//             levels.add(new ArrayList<Integer>());\n\n//          // fulfil the current level\n//          levels.get(level).add(node.val);\n\n//          // process child nodes for the next level\n//          if (node.left != null)\n//             helper(node.left, level + 1);\n//          if (node.right != null)\n//             helper(node.right, level + 1);\n//     }\n    \n    public List<List<Integer>> levelOrder(TreeNode root) {\n//         List<List<Integer>> levels = new ArrayList<List<Integer>>();\n//         if (root == null) return levels;\n//         int level = 0;\n//         Queue<TreeNode> queue = new LinkedList<TreeNode>();\n//         queue.add(root);\n//         while(!queue.isEmpty()){\n//         // start the current level\n//           levels.add(new ArrayList<Integer>());\n\n//           // number of elements in the current level\n//           int level_length = queue.size();\n//           for(int i = 0; i < level_length; ++i) {\n//             TreeNode node = queue.remove();\n\n//             // fulfill the current level\n//             levels.get(level).add(node.val);\n\n//             // add child nodes of the current level\n//             // in the queue for the next level\n//             if (node.left != null) queue.add(node.left);\n//             if (node.right != null) queue.add(node.right);\n//           }\n//           // go to next level\n//           level++;\n//         }\n//         return levels;\n        \n        // Without using the levels variable we just use a marker.\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        List<Integer> levels = new ArrayList<>();\n        List<List<Integer>> result = new ArrayList<List<Integer>>();\n        TreeNode marker  = new TreeNode(Integer.MIN_VALUE);\n        queue.add(root);\n        queue.add(marker);\n        \n        while(!queue.isEmpty()){\n            TreeNode cur = queue.remove();\n            if(cur != null){\n                if(cur.val == Integer.MIN_VALUE){\n                    if(levels.size() != 0)result.add(levels);\n                    levels = new ArrayList<>();\n                    if(!queue.isEmpty()) queue.add(marker);\n                } else {\n                    levels.add(cur.val);\n                    queue.add(cur.left);\n                    queue.add(cur.right);\n                }\n            }\n        }\n        return result;\n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal"}