{"id":634192137,"lang":"java","time":"1 week, 6 days","timestamp":1643956377,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/634192137/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"86.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int minDepth(TreeNode root) {\n        if(root == null)\n            return 0;\n        if(root.left == null && root.right == null)\n            return 1;\n        int depth = Integer.MAX_VALUE;\n        if(root.left != null)\n            depth = Math.min(depth, minDepth(root.left));\n        if(root.right != null)\n            depth = Math.min(depth, minDepth(root.right));\n        return depth+1;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree"}