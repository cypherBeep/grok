{"id":640304224,"lang":"rust","time":"4 days, 22 hours","timestamp":1644725344,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/640304224/","is_pending":"Not Pending","title":"Path Sum","memory":"2.6 MB","code":"// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn has_path_sum(root: Option<Rc<RefCell<TreeNode>>>, target_sum: i32) -> bool {\n        if root.is_none() {\n            return false;\n        }\n        match root {\n            Some(x) => {\n                let node = x.borrow();\n                if target_sum - node.val == 0 && node.left.is_none() && node.right.is_none() {\n                    return true;\n                }\n               return Self::has_path_sum(node.left.clone(), target_sum-node.val) || Self::has_path_sum(node.right.clone(), target_sum-node.val)\n            },\n            _ => return false,\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum"}