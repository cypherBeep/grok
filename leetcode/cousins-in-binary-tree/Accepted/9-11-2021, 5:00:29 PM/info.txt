{"id":553053220,"lang":"java","time":"5 months, 1 week","timestamp":1631359829,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/553053220/","is_pending":"Not Pending","title":"Cousins in Binary Tree","memory":"36.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    public boolean isCousins(TreeNode root, int x, int y) {\n        // bfs level order traversal\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        queue.add(root);\n        boolean siblings = false;\n        boolean cousins = false;\n        while(!queue.isEmpty()){\n            int depth = queue.size();\n            for(int i = 0; i < depth; i++){\n                TreeNode node = queue.remove();\n                if(node == null) siblings = false;\n                else {\n                    if(node.val == x || node.val == y){\n                        // could be our ans so...\n                        if(!cousins){\n                        cousins = siblings = true;\n                        } else {\n                            // not cousins\n                            return !siblings;\n                        }\n                    }\n                    if(node.left != null) queue.add(node.left);\n                    if(node.right != null) queue.add(node.right);\n                    queue.add(null);\n                }\n            }\n            if(cousins) return false;\n        }\n        return false;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"cousins-in-binary-tree"}