{"id":552879462,"lang":"java","time":"5 months, 1 week","timestamp":1631329353,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/552879462/","is_pending":"Not Pending","title":"House Robber","memory":"36.2 MB","code":"class Solution {\n    \n    private int[] memo;\n    \n    public int rob(int[] nums) {\n        \n        this.memo = new int[100];\n        \n        // Fill with sentinel value representing not-calculated recursions.\n        Arrays.fill(this.memo, -1);\n        \n        return this.robFrom(0, nums);\n    }\n    \n    private int robFrom(int i, int[] nums) {\n        \n        // No more houses left to examine.\n        if (i >= nums.length) {\n            return 0;\n        }\n        \n        // Return cached value.\n        if (this.memo[i] > -1) {\n            return this.memo[i];\n        }\n        \n        // Recursive relation evaluation to get the optimal answer.\n        int ans = Math.max(this.robFrom(i + 1, nums), this.robFrom(i + 2, nums) + nums[i]);\n        \n        // Cache for future use.\n        this.memo[i] = ans;\n        return ans;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber"}