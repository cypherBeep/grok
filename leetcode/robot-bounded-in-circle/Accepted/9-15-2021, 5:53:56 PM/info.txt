{"id":555335369,"lang":"java","time":"5Â months","timestamp":1631708636,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/555335369/","is_pending":"Not Pending","title":"Robot Bounded In Circle","memory":"36.8 MB","code":"class Solution {\n    public boolean isRobotBounded(String instructions) {\n        // d[0] north, d[1] east, d[2] south, d[3] west\n        int[][] d = new int[][]{{0,1},{1,0},{0,-1},{-1,0}};\n        \n        // initital pos (0,0)\n        int x = 0, y = 0;\n        \n        // facing north\n        int idx = 0;\n        \n        for(char c: instructions.toCharArray()){\n            if(c == 'L'){\n                // turn left basically +1 +1 +1 or -1\n                // 1  turn to left is 3 turns to right \n                idx = (idx+3)%4;\n            } else if(c == 'R'){\n                idx = (idx+1)%4;\n            }else{\n                x += d[idx][0];\n                y += d[idx][1];\n            }\n        }\n        // if robot faces north after first cycle \n        // he's only gonna go up up up.\n        // or if he don't reach his initital pos there can't \n        // be no cycle.\n        \n        return (x == 0 && y == 0) || (idx != 0);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"robot-bounded-in-circle"}