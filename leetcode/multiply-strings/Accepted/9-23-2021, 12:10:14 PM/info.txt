{"id":559602546,"lang":"java","time":"4Â months, 3Â weeks","timestamp":1632379214,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/559602546/","is_pending":"Not Pending","title":"Multiply Strings","memory":"39.2 MB","code":"class Solution {\n    public String multiply(String num1, String num2) {\n        int l1 = num1.length();\n        int l2 = num2.length();\n        \n        if(l1 == 0 || l2 == 0) return \"0\";\n        \n        // now result of multiplication of two numbers\n        // would always have size less than equal to length\n        // if the two numbers so,\n        \n        int[] res = new int[l1+l2];\n        String s = \"\";\n        \n        // idea is to simulate the multiplication we do on \n        // paper the one where last digit of second number is\n        // multiplied with the first then we add a 0 in next step\n        // and continue. Add the whole shebang to get the final ans.\n        \n        // to find pos in result.\n        int idx1 = 0;\n        int idx2 = 0;\n        \n        for(int i = l1-1; i >= 0; i--){\n            int carry = 0;\n            int n1 = num1.charAt(i) - '0';\n            \n            // reset the second pos idx\n            idx2 = 0;\n            for(int j = l2-1; j >= 0; j--){\n                int n2 = num2.charAt(j) - '0';\n                int sum = n1 * n2 + res[idx1+idx2] + carry;\n                res[idx1+idx2] = sum%10; // we only store the last digit\n                idx2++;\n                carry = sum/10;\n            }\n            if(carry>0) res[idx1+idx2] += carry;\n            idx1++;\n        }\n        \n        int i = res.length-1;\n        while(i >= 0 && res[i] == 0) i--; // ignore 0s from right\n        if(i == -1) return \"0\"; // i.e all were 0s\n        while(i >= 0) {\n            s += res[i];\n            i--;\n        }\n        return s;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"multiply-strings"}