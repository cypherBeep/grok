{"id":551983723,"lang":"java","time":"5 months, 1 week","timestamp":1631177780,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/551983723/","is_pending":"Not Pending","title":"Binary Tree Preorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> preorderTraversal(TreeNode root) {\n        ArrayList<Integer> out = new ArrayList<Integer>();\n        Stack<TreeNode> stack = new Stack<>();\n        if(root == null) return out;\n        stack.push(root);\n        while(!stack.isEmpty()){\n            TreeNode node = stack.pop();\n            out.add(node.val);\n            if(node.left != null) stack.push(node.left);\n            if(node.right != null) stack.push(node.right);\n        }\n        \n        return out;\n    }\n    // Recursive\n    // public static void preorder(TreeNode root, List<Integer> out){\n    //     if(root == null) return;\n    //     out.add(root.val);\n    //     preorder(root.left, out);\n    //     preorder(root.right, out);\n    // }\n}","compare_result":"111111011110011001011011110001000001001000001001001011001001011011100","title_slug":"binary-tree-preorder-traversal"}