{"id":555369131,"lang":"java","time":"5Â months","timestamp":1631714545,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/555369131/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"41.3 MB","code":"class Solution {\n    public void solve(char[][] board) {\n        int m = board.length ;\n        int n = board[0].length;\n        for(int i = 0 ; i < m ; i++){\n            for(int j = 0 ; j < n ; j++){\n                if(i == 0 || j == 0 || i == m-1 || j == n-1){\n                    if(board[i][j] == 'O'){\n                        dfs(board , i,j);\n                    }\n                }\n            }\n        }\n        for(int i = 0 ; i < m ; i++){\n            for(int j = 0 ; j < n ; j++){\n                if(board[i][j] == '2'){ \n                    board[i][j] = 'O';\n                }\n                else{\n                    board[i][j] = 'X';\n                }\n            }\n        }\n    }\n\t\n    public void dfs(char[][] board , int i , int j){\n        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != 'O'){\n            return ;\n        }\n        if(board[i][j] == 'O'){\n            board[i][j] = '2'; // changing the value of 'O' that can be reached through the boundary 'O'\n            dfs(board , i+1,j);\n            dfs(board , i-1,j);\n            dfs(board , i,j+1);\n            dfs(board , i,j-1);\n        }\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"surrounded-regions"}