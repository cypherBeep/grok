{"id":632903997,"lang":"java","time":"2Â weeks, 1Â day","timestamp":1643798125,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/632903997/","is_pending":"Not Pending","title":"Find Minimum in Rotated Sorted Array","memory":"42.5 MB","code":"class Solution {\n    public int findMin(int[] nums) {\n        // Modified Binary Search\n        // As we know that nums is sorted but rotated so we can't use mid point as\n        // we do in standard binary search so, we find infliction point\n        // such that later element is smaller than current.\n        if(nums.length == 1) \n            return nums[0];\n        int left = 0;\n        int right = nums.length - 1;\n        \n        if(nums[right] > nums[left]) // Already sorted\n            return nums[0];\n        \n        while(left <= right) {\n            int mid = left + (right - left) / 2;\n            if(nums[mid] > nums[mid+1])\n                return nums[mid+1];\n            if(nums[mid-1] > nums[mid])\n                return nums[mid];\n            if(nums[mid] > nums[0])\n                left = mid + 1;\n            else\n                right = mid - 1;\n        }\n        return -1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-minimum-in-rotated-sorted-array"}